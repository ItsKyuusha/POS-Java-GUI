/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pos.javagui;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSetMetaData;  // Pastikan yang digunakan ini
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;  // Import untuk koneksi MySQL
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
/**

/**
 *
 * @author Kyuusha
 */
public class FormMasterUser extends javax.swing.JFrame {
// Koneksi dan objek terkait
    Connection Con; 
    ResultSet RsUser; 
    Statement stm; 
    
    Boolean ada = false; 
    Boolean edit = false; 
    
    private Object[][] dataTable = null; 
    private String[] header = {"ID", "User_ID", "Nama User", "Password"};
    /**
     * Creates new form FormMasterUser
     */
    public FormMasterUser() {
        initComponents();
        open_db();  // Membuka koneksi database
        baca_data();  // Membaca data dari database
        aktif(false);  // Menonaktifkan form input
        setTombol(true);  // Mengatur tombol-tombol
        
        // Menambahkan MouseListener ke tabel
        tblUser.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int selectedRow = tblUser.getSelectedRow();
                if (selectedRow >= 0) {
                    String kode = tblUser.getValueAt(selectedRow, 1).toString();
                    user_id.setText(kode);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        user_id = new javax.swing.JTextField();
        name = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        password = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblUser = new javax.swing.JTable();
        tambah = new javax.swing.JButton();
        simpan = new javax.swing.JButton();
        koreksi = new javax.swing.JButton();
        hapus = new javax.swing.JButton();
        batal = new javax.swing.JButton();
        keluar = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        user_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                user_idActionPerformed(evt);
            }
        });

        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Data User");

        jLabel2.setText("User ID");

        jLabel3.setText("Nama User");

        jLabel4.setText("Password");

        password.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordActionPerformed(evt);
            }
        });

        tblUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "User ID", "Nama User", "Password"
            }
        ));
        jScrollPane2.setViewportView(tblUser);

        tambah.setText("Tambah");
        tambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahActionPerformed(evt);
            }
        });

        simpan.setText("Simpan");
        simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpanActionPerformed(evt);
            }
        });

        koreksi.setText("Koreksi");
        koreksi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                koreksiActionPerformed(evt);
            }
        });

        hapus.setText("Hapus");
        hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusActionPerformed(evt);
            }
        });

        batal.setText("Batal");
        batal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batalActionPerformed(evt);
            }
        });

        keluar.setText("Keluar");
        keluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keluarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                            .addComponent(password))
                        .addGap(160, 160, 160))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tambah)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(simpan)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(koreksi)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hapus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(batal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(keluar)
                        .addContainerGap())))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(user_id, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(159, 159, 159))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(395, 395, 395))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jSeparator1)
                            .addContainerGap()))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tambah)
                    .addComponent(simpan)
                    .addComponent(koreksi)
                    .addComponent(hapus)
                    .addComponent(batal)
                    .addComponent(keluar))
                .addContainerGap(76, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(9, 9, 9)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(25, 25, 25)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(user_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(429, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void user_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_user_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_user_idActionPerformed

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void passwordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordActionPerformed

    private void tambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahActionPerformed
        aktif(true);
        setTombol(false);
        kosong();
    }//GEN-LAST:event_tambahActionPerformed

    private void simpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpanActionPerformed
        // Pastikan koneksi database sudah ada
        if (Con == null) {
            JOptionPane.showMessageDialog(this, "Koneksi ke database tidak tersedia.");
            return;
        }

        try {
            // Pastikan Statement diinisialisasi baru sebelum digunakan
            stm = Con.createStatement();  // Membuat Statement baru

            String tUserid = user_id.getText();
            String tName = name.getText();
            String tPassword = password.getText();

            // Periksa apakah mode edit atau tambah
            if (edit) {  // Jika edit == true, maka update
                String sql = "UPDATE user SET " +
                    "name = '" + tName + "', " +
                    "password = '" + tPassword + "' " +  // Tidak ada koma setelah 'password'
                    "WHERE user_id = '" + tUserid + "'";  // Pastikan user_id menggunakan tanda kutip
                stm.executeUpdate(sql);
            } else {  // Jika edit == false, maka insert
                String sql = "INSERT INTO user (user_id, name, password) " +
                    "VALUES ('" + tUserid + "', '" + tName + "', '" + tPassword + "')";
                stm.executeUpdate(sql);
            }
            
            // Setelah selesai melakukan insert atau update, baca data lagi
            baca_data();
            JOptionPane.showMessageDialog(this, "Data berhasil disimpan!");

            // Setelah selesai, reset form atau aktifkan tombol sesuai dengan kebutuhan
            kosong();
            aktif(false);
            setTombol(true);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error menyimpan data: " + e.getMessage());
        } finally {
            // Tutup statement setelah selesai
            try {
                if (stm != null && !stm.isClosed()) {
                    stm.close();  // Pastikan statement ditutup setelah digunakan
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error menutup statement: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_simpanActionPerformed

    private void koreksiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_koreksiActionPerformed
        edit = true;
        aktif(true);
        setTombol(false);
        user_id.setEditable(false);

        // Mengambil data dari baris yang dipilih di tabel dan memasukkan ke form
        int row = tblUser.getSelectedRow();  // Ambil data dari baris yang dipilih
        user_id.setText(tblUser.getValueAt(row, 1).toString());
        name.setText(tblUser.getValueAt(row, 2).toString());
        password.setText(tblUser.getValueAt(row, 3).toString());
    }//GEN-LAST:event_koreksiActionPerformed

    private void hapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusActionPerformed
        try {
        // Pastikan koneksi aktif
        if (Con == null || Con.isClosed()) {
            open_db();  // Membuka koneksi jika belum ada
        }

        // Membuat statement baru setiap kali hapus
        stm = Con.createStatement();

        // Memeriksa apakah user_id kosong
        String userId = user_id.getText().trim();
        if (userId.isEmpty()) {
            JOptionPane.showMessageDialog(null, "User ID tidak boleh kosong!", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Mendapatkan ID berdasarkan user_id yang dipilih
        String sqlSelect = "SELECT ID FROM user WHERE user_id = '" + userId + "'";
        ResultSet rs = stm.executeQuery(sqlSelect);
        if (rs.next()) {
            int id = rs.getInt("ID");

            // Jika ditemukan ID, lakukan DELETE berdasarkan ID (primary key)
            String sqlDelete = "DELETE FROM user WHERE ID = ?";
            try (PreparedStatement pst = Con.prepareStatement(sqlDelete)) {
                pst.setInt(1, id);  // Menyisipkan ID yang ditemukan

                int affectedRows = pst.executeUpdate();
                if (affectedRows > 0) {
                    JOptionPane.showMessageDialog(null, "Data User berhasil dihapus!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Data User tidak ditemukan!", "Gagal", JOptionPane.ERROR_MESSAGE);
                }

                // Memperbarui data di tabel
                baca_data();
                kosong();  // Mengosongkan form input
            }
        } else {
            JOptionPane.showMessageDialog(null, "User ID tidak ditemukan!", "Gagal", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        try {
            if (stm != null) {
                stm.close();  // Menutup statement setelah digunakan
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error menutup statement: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_hapusActionPerformed

    private void batalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batalActionPerformed
        aktif(false);
        setTombol(true);
        user_id.setText("");
        name.setText("");
        password.setText("");
    }//GEN-LAST:event_batalActionPerformed

    private void keluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keluarActionPerformed
        System.exit(0);
    }//GEN-LAST:event_keluarActionPerformed

    // Method untuk membuka koneksi database
    private void open_db() { 
        try { 
            // Membuat objek koneksi dan membuka koneksi ke database
            KoneksiMysql kon = new KoneksiMysql("localhost", "root", "", "pos_javagui");
            Con = kon.getConnection(); 
            // System.out.println("Koneksi Berhasil");
        } catch (Exception e) { 
            System.out.println("Error : " + e); 
        } 
    }
    
    private void baca_data() { 
    // Mulai dengan try-catch untuk menangani SQLException
    Statement stm = null;
    ResultSet RsUser = null;

    try { 
        // Membuat statement dengan ResultSet yang dapat digulir (scrollable)
        stm = Con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY); // Menggunakan scrollable ResultSet
        RsUser = stm.executeQuery("SELECT * FROM user");  // Menjalankan query

        // Mengambil metadata dari ResultSet
        ResultSetMetaData meta = RsUser.getMetaData(); 
        int col = meta.getColumnCount(); 
        int baris = 0;
        
        // Hitung jumlah baris dari ResultSet
        while (RsUser.next()) { 
            baris = RsUser.getRow(); 
        }

        // Menyiapkan array untuk menampung data
        dataTable = new Object[baris][col]; 
        int x = 0; 
        RsUser.beforeFirst();  // Set kembali posisi pointer ResultSet
        
        // Memasukkan data ke dalam array dataTable
        while (RsUser.next()) { 
            dataTable[x][0] = RsUser.getString("ID"); 
            dataTable[x][1] = RsUser.getString("user_id"); 
            dataTable[x][2] = RsUser.getString("name");
            dataTable[x][3] = RsUser.getString("password");
            x++; 
        }

        // Menampilkan data ke dalam JTable
        tblUser.setModel(new DefaultTableModel(dataTable, header));

        } catch (SQLException e) { 
            // Menangani SQLException dengan menampilkan pesan error
            JOptionPane.showMessageDialog(null, "Error membaca data: " + e.getMessage()); 
        } finally {
            // Pastikan untuk hanya menutup ResultSet dan Statement setelah semua selesai digunakan.
            try {
                if (RsUser != null && !RsUser.isClosed()) {
                    RsUser.close();  // Hanya tutup ResultSet jika sudah tidak digunakan
                }
                if (stm != null && !stm.isClosed()) {
                    stm.close();  // Hanya tutup Statement jika sudah tidak digunakan
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error menutup koneksi: " + e.getMessage());
            }
        }
    }
    
    // Method untuk mengosongkan input form
    private void kosong() { 
        user_id.setText(""); 
        name.setText(""); 
        password.setText("");
    }
    
    // Method untuk mengaktifkan/menonaktifkan input field
    private void aktif(boolean x) { 
        user_id.setEditable(x); 
        name.setEditable(x);
        password.setEditable(x);
    }
    
    // Method untuk mengaktifkan/menonaktifkan tombol
    private void setTombol(boolean t) { 
        tambah.setEnabled(t); 
        koreksi.setEnabled(t); 
        hapus.setEnabled(t); 
        simpan.setEnabled(!t); 
        batal.setEnabled(!t); 
        keluar.setEnabled(t); 
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormMasterUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormMasterUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormMasterUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormMasterUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormMasterUser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton batal;
    private javax.swing.JButton hapus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton keluar;
    private javax.swing.JButton koreksi;
    private javax.swing.JTextField name;
    private javax.swing.JTextField password;
    private javax.swing.JButton simpan;
    private javax.swing.JButton tambah;
    private javax.swing.JTable tblUser;
    private javax.swing.JTextField user_id;
    // End of variables declaration//GEN-END:variables
}
