/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pos.javagui;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSetMetaData;  // Pastikan yang digunakan ini
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;  // Import untuk koneksi MySQL
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;


/**
 *
 * @author Kyuusha
 */
public class FormMasterBarang extends javax.swing.JFrame {
    // Koneksi dan objek terkait
    Connection Con; 
    ResultSet RsBrg; 
    Statement stm; 
    
    Boolean ada = false; 
    String sSatuan; 
    Boolean edit = false; 
    
    private Object[][] dataTable = null; 
    private String[] header = {"Kode", "Nama Barang", "Satuan", "Harga Jual", "Harga Beli", "Stok", "Stok Min"};
    
    
    /**
     * Creates new form FormMasterBarang
     */
    public FormMasterBarang() {
        initComponents();
        open_db();  // Membuka koneksi database
        baca_data();  // Membaca data dari database
        aktif(false);  // Menonaktifkan form input
        setTombol(true);  // Mengatur tombol-tombol
        
        // Menambahkan MouseListener ke tabel
        tblBrg.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int selectedRow = tblBrg.getSelectedRow();
                if (selectedRow >= 0) {
                    String kode = tblBrg.getValueAt(selectedRow, 0).toString();
                    kd_brg.setText(kode);  // Menampilkan kode barang yang diklik ke form
                }
            }
        });

        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        kd_brg = new javax.swing.JTextField();
        nm_brg = new javax.swing.JTextField();
        harga_jual = new javax.swing.JTextField();
        satuan = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        stok = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        stok_min = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblBrg = new javax.swing.JTable();
        tambah = new javax.swing.JButton();
        simpan = new javax.swing.JButton();
        koreksi = new javax.swing.JButton();
        hapus = new javax.swing.JButton();
        batal = new javax.swing.JButton();
        keluar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        harga_beli = new javax.swing.JTextField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Data Barang");

        jLabel2.setText("Kode Barang");

        jLabel3.setText("Nama Barang");

        jLabel4.setText("Satuan");

        jLabel5.setText("Harga Jual");

        kd_brg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kd_brgActionPerformed(evt);
            }
        });

        nm_brg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nm_brgActionPerformed(evt);
            }
        });

        satuan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "buah", "sayur", "bumbu" }));

        jLabel6.setText("Stok");

        jLabel7.setText("Stok Minimal");

        tblBrg.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Kode", "Nama Barang", "Satuan", "Harga Jual", "Harga Beli", "Stok", "Stok Minimal"
            }
        ));
        jScrollPane2.setViewportView(tblBrg);

        tambah.setText("Tambah");
        tambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tambahActionPerformed(evt);
            }
        });

        simpan.setText("Simpan");
        simpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpanActionPerformed(evt);
            }
        });

        koreksi.setText("Koreksi");
        koreksi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                koreksiActionPerformed(evt);
            }
        });

        hapus.setText("Hapus");
        hapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hapusActionPerformed(evt);
            }
        });

        batal.setText("Batal");
        batal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                batalActionPerformed(evt);
            }
        });

        keluar.setText("Keluar");
        keluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keluarActionPerformed(evt);
            }
        });

        jLabel8.setText("Harga Beli");

        harga_beli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                harga_beliActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(248, 248, 248))
                            .addComponent(jSeparator1))
                        .addGap(32, 32, 32))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(harga_beli, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(harga_jual, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nm_brg)
                                    .addComponent(satuan, javax.swing.GroupLayout.Alignment.TRAILING, 0, 96, Short.MAX_VALUE)
                                    .addComponent(kd_brg)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(stok_min, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                                    .addComponent(stok))))
                        .addGap(192, 192, 192))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(tambah)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(simpan)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(koreksi)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hapus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(batal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keluar)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(kd_brg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nm_brg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(satuan, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(harga_jual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(harga_beli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(stok_min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tambah)
                    .addComponent(simpan)
                    .addComponent(koreksi)
                    .addComponent(hapus)
                    .addComponent(batal)
                    .addComponent(keluar))
                .addContainerGap(208, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void kd_brgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kd_brgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_kd_brgActionPerformed

    private void nm_brgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nm_brgActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nm_brgActionPerformed

    private void tambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tambahActionPerformed
        aktif(true);
        setTombol(false);
        kosong();
    }//GEN-LAST:event_tambahActionPerformed

    private void keluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keluarActionPerformed
        dispose();
    }//GEN-LAST:event_keluarActionPerformed

    private void simpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpanActionPerformed
        // Pastikan koneksi database sudah ada
    if (Con == null) {
        JOptionPane.showMessageDialog(this, "Koneksi ke database tidak tersedia.");
        return;
    }
    
    try {
        // Pastikan Statement diinisialisasi baru sebelum digunakan
        stm = Con.createStatement();  // Membuat Statement baru
        
        String tKode = kd_brg.getText();
        String tNama = nm_brg.getText();
        String sSatuan = (String) satuan.getSelectedItem();
        double hrg_jual = Double.parseDouble(harga_jual.getText());
        double hrg_beli = Double.parseDouble(harga_beli.getText());
        int stk = Integer.parseInt(stok.getText());
        int stkMin = Integer.parseInt(stok_min.getText());

        // Periksa apakah mode edit atau tambah
        if (edit == true) { 
            stm.executeUpdate("UPDATE barang SET nm_brg='" + tNama + "', satuan='" + sSatuan + "', harga_jual=" + hrg_jual + ", harga_beli=" + hrg_beli + ", stok=" + stk + ", stok_min=" + stkMin + " WHERE kd_brg='" + tKode + "'"); 
        } else { 
            stm.executeUpdate("INSERT INTO barang (kd_brg, nm_brg, satuan, harga_jual, harga_beli, stok, stok_min) VALUES ('" + tKode + "', '" + tNama + "', '" + sSatuan + "', " + hrg_jual + ", " + hrg_beli + ", " + stk + ", " + stkMin + ")");
        }

        // Setelah selesai melakukan insert atau update, baca data lagi
        baca_data();
        JOptionPane.showMessageDialog(this, "Data berhasil disimpan!");
        
        // Setelah selesai, reset form atau aktifkan tombol sesuai dengan kebutuhan
        kosong();
        aktif(false);
        setTombol(true);

    } catch (SQLException e) { 
        JOptionPane.showMessageDialog(this, "Error menyimpan data: " + e.getMessage());
    } finally {
        // Tutup statement setelah selesai
        try {
            if (stm != null && !stm.isClosed()) {
                stm.close();  // Pastikan statement ditutup setelah digunakan
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error menutup statement: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_simpanActionPerformed

    private void harga_beliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_harga_beliActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_harga_beliActionPerformed

    private void koreksiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_koreksiActionPerformed
        edit = true;
        aktif(true);
        setTombol(false);
        kd_brg.setEditable(false);
        
        // Mengambil data dari baris yang dipilih di tabel dan memasukkan ke form
        int row = tblBrg.getSelectedRow();  // Ambil data dari baris yang dipilih
        kd_brg.setText(tblBrg.getValueAt(row, 0).toString());
        nm_brg.setText(tblBrg.getValueAt(row, 1).toString());
        satuan.setSelectedItem(tblBrg.getValueAt(row, 2).toString());
        harga_jual.setText(tblBrg.getValueAt(row, 3).toString());
        harga_beli.setText(tblBrg.getValueAt(row, 4).toString());
        stok.setText(tblBrg.getValueAt(row, 5).toString());
        stok_min.setText(tblBrg.getValueAt(row, 6).toString());
    }//GEN-LAST:event_koreksiActionPerformed

    private void hapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hapusActionPerformed
        try {
        // Pastikan statement selalu dibuat setelah koneksi aktif
        if (Con == null || Con.isClosed()) {
            open_db();  // Membuka koneksi jika belum ada
        }
        
        // Membuat statement baru setiap kali hapus
        stm = Con.createStatement();
        
        // Mengecek jika kode barang tidak kosong
        if (kd_brg.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Kode Barang tidak boleh kosong!", "Peringatan", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // SQL query untuk hapus data
        String sql = "DELETE FROM barang WHERE kd_brg='" + kd_brg.getText() + "'";
        int affectedRows = stm.executeUpdate(sql);
        
        // Memeriksa apakah baris berhasil dihapus
        if (affectedRows > 0) {
            // Jika berhasil menghapus, tampilkan pesan sukses
            JOptionPane.showMessageDialog(null, "Data Barang berhasil dihapus!", "Sukses", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Jika tidak ada baris yang dihapus (misalnya, data tidak ditemukan)
            JOptionPane.showMessageDialog(null, "Data Barang tidak ditemukan!", "Gagal", JOptionPane.ERROR_MESSAGE);
        }

        // Memanggil baca_data untuk memperbarui tampilan setelah data dihapus
        baca_data();
        
        // Mengosongkan input form setelah berhasil
        kosong();
        } catch (SQLException e) {
            // Menampilkan error jika terjadi SQLException
            JOptionPane.showMessageDialog(null, "Terjadi kesalahan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (stm != null) {
                    stm.close();  // Menutup statement setelah digunakan
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error menutup statement: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_hapusActionPerformed

    private void batalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_batalActionPerformed
        aktif(false);
        setTombol(true);
        kd_brg.setText("");
        nm_brg.setText("");
        satuan.setSelectedIndex(-1);
        harga_jual.setText("");
        harga_beli.setText("");
        stok.setText("");
        stok_min.setText("");
    }//GEN-LAST:event_batalActionPerformed
    
    // Method untuk membuka koneksi database
    private void open_db() { 
        try { 
            // Membuat objek koneksi dan membuka koneksi ke database
            KoneksiMysql kon = new KoneksiMysql("localhost", "root", "", "pos_javagui");
            Con = kon.getConnection(); 
            // System.out.println("Koneksi Berhasil");
        } catch (Exception e) { 
            System.out.println("Error : " + e); 
        } 
    }
    
    private void baca_data() { 
    // Mulai dengan try-catch untuk menangani SQLException
    Statement stm = null;
    ResultSet RsBrg = null;

    try { 
        // Membuat statement dengan ResultSet yang dapat digulir (scrollable)
        stm = Con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY); // Menggunakan scrollable ResultSet
        RsBrg = stm.executeQuery("SELECT * FROM barang");  // Menjalankan query

        // Mengambil metadata dari ResultSet
        ResultSetMetaData meta = RsBrg.getMetaData(); 
        int col = meta.getColumnCount(); 
        int baris = 0;
        
        // Hitung jumlah baris dari ResultSet
        while (RsBrg.next()) { 
            baris = RsBrg.getRow(); 
        }

        // Menyiapkan array untuk menampung data
        dataTable = new Object[baris][col]; 
        int x = 0; 
        RsBrg.beforeFirst();  // Set kembali posisi pointer ResultSet
        
        // Memasukkan data ke dalam array dataTable
        while (RsBrg.next()) { 
            dataTable[x][0] = RsBrg.getString("kd_brg"); 
            dataTable[x][1] = RsBrg.getString("nm_brg"); 
            dataTable[x][2] = RsBrg.getString("satuan"); 
            dataTable[x][3] = RsBrg.getDouble("harga_jual");  // Gunakan harga_jual
            dataTable[x][4] = RsBrg.getDouble("harga_beli");  // Gunakan harga_beli
            dataTable[x][5] = RsBrg.getInt("stok"); 
            dataTable[x][6] = RsBrg.getInt("stok_min"); 
            x++; 
        }

        // Menampilkan data ke dalam JTable
        tblBrg.setModel(new DefaultTableModel(dataTable, header));

    } catch (SQLException e) { 
        // Menangani SQLException dengan menampilkan pesan error
        JOptionPane.showMessageDialog(null, "Error membaca data: " + e.getMessage()); 
    } finally {
        // Pastikan untuk hanya menutup ResultSet dan Statement setelah semua selesai digunakan.
        try {
            if (RsBrg != null && !RsBrg.isClosed()) {
                RsBrg.close();  // Hanya tutup ResultSet jika sudah tidak digunakan
            }
            if (stm != null && !stm.isClosed()) {
                stm.close();  // Hanya tutup Statement jika sudah tidak digunakan
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error menutup koneksi: " + e.getMessage());
        }
    }
}

    
    // Method untuk mengosongkan input form
    private void kosong() { 
        kd_brg.setText(""); 
        nm_brg.setText(""); 
        harga_jual.setText("");
        harga_beli.setText("");
        stok.setText(""); 
        stok_min.setText(""); 
    }
    
    // Method untuk mengaktifkan/menonaktifkan input field
    private void aktif(boolean x) { 
        kd_brg.setEditable(x); 
        nm_brg.setEditable(x); 
        satuan.setEnabled(x); 
        harga_jual.setEditable(x);
        harga_beli.setEditable(x);
        stok.setEditable(x); 
        stok_min.setEditable(x); 
    }
    
    // Method untuk mengaktifkan/menonaktifkan tombol
    private void setTombol(boolean t) { 
        tambah.setEnabled(t); 
        koreksi.setEnabled(t); 
        hapus.setEnabled(t); 
        simpan.setEnabled(!t); 
        batal.setEnabled(!t); 
        keluar.setEnabled(t); 
    }
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormMasterBarang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormMasterBarang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormMasterBarang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormMasterBarang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormMasterBarang().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton batal;
    private javax.swing.JButton hapus;
    private javax.swing.JTextField harga_beli;
    private javax.swing.JTextField harga_jual;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField kd_brg;
    private javax.swing.JButton keluar;
    private javax.swing.JButton koreksi;
    private javax.swing.JTextField nm_brg;
    private javax.swing.JComboBox<String> satuan;
    private javax.swing.JButton simpan;
    private javax.swing.JTextField stok;
    private javax.swing.JTextField stok_min;
    private javax.swing.JButton tambah;
    private javax.swing.JTable tblBrg;
    // End of variables declaration//GEN-END:variables
}
